# -*- coding: utf-8 -*-

# @Time    : 2025-5-30
# @Author  : 程序员NEO
# @FileName: example.py
# @Software: VSCode
# @Email   : it666@linux.do
# @Github  : https://github.com/BNTang
# @Description: 01-Python-文件操作-概念介绍

"""
Python文件操作概念介绍
====================

核心概念总结：
1. 文件是数据存储的容器和操作单位
2. 文件提供持久化存储能力（断电不丢失）
3. 文件由三部分组成：文件名、扩展名、文件内容
4. 文件分为文本文件和二进制文件两种类型
"""

# ============================================================================
# 1. 文件的基本概念
# ============================================================================

print("=" * 50)
print("1. 文件基本概念")
print("=" * 50)

# 文件是什么？
# - 数据存储的容器
# - 操作系统中的基本操作单位
# - 提供持久化存储能力

# 为什么需要文件？
# 内存 vs 磁盘存储对比
print("内存特点：")
print("- 速度快")
print("- 断电数据丢失（易失性）")
print("- 程序运行时的临时存储")

print("\n磁盘特点：")
print("- 速度相对较慢")
print("- 断电数据不丢失（持久性）")
print("- 长期存储数据")

# 数据持久化示例
def demonstrate_data_persistence():
    """演示数据持久化的概念"""
    # 模拟计算结果
    calculation_result = sum(range(1, 101))  # 1到100的和
    print(f"\n计算结果: {calculation_result}")
    
    # 将结果保存到文件（持久化）
    with open("calculation_result.txt", "w", encoding="utf-8") as f:
        f.write(f"1到100的和为: {calculation_result}")
    
    print("数据已保存到文件，即使程序结束也不会丢失")

# ============================================================================
# 2. 文件的组成结构
# ============================================================================

print("\n" + "=" * 50)
print("2. 文件的组成结构")
print("=" * 50)

# 文件三要素：文件名 + 扩展名 + 文件内容

print("文件组成部分：")
print("┌─────────────────────────────────┐")
print("│  example.txt                    │")
print("│  ↑        ↑                     │")
print("│ 文件名   扩展名                  │")
print("│                                 │")
print("│ 文件内容：Hello World           │")
print("└─────────────────────────────────┘")

# 文件名规则演示
def file_naming_rules():
    """演示文件命名规则"""
    print("\n文件命名规则：")
    print("✓ 同级目录下文件名必须唯一")
    print("✓ 文件名 + 扩展名构成完整标识")
    print("✗ 不能有两个相同的完整文件名")
    
    # 示例：模拟文件列表
    files_in_directory = [
        "data.txt",
        "data.doc",      # 允许：扩展名不同
        "backup.txt",
        # "data.txt"     # 不允许：重复文件名
    ]
    
    print(f"\n目录中的文件: {files_in_directory}")

# ============================================================================
# 3. 文件扩展名与格式
# ============================================================================

print("\n" + "=" * 50)
print("3. 文件扩展名与格式")
print("=" * 50)

# 常见文件格式及特点
file_formats = {
    ".txt": {"类型": "纯文本", "特点": "无格式，纯文字", "大小": "小"},
    ".doc/.docx": {"类型": "Word文档", "特点": "富文本，支持格式", "大小": "大"},
    ".pdf": {"类型": "PDF文档", "特点": "固定格式，跨平台", "大小": "中等"},
    ".jpg/.png": {"类型": "图片文件", "特点": "二进制图像数据", "大小": "取决于分辨率"},
    ".mp4/.avi": {"类型": "视频文件", "特点": "二进制视频数据", "大小": "很大"},
}

print("常见文件格式对比：")
for ext, info in file_formats.items():
    print(f"{ext:12} | {info['类型']:8} | {info['特点']:15} | 大小: {info['大小']}")

# 文件格式兼容性演示
def file_format_compatibility():
    """演示不同格式的兼容性问题"""
    print("\n文件格式兼容性：")
    print("同样的数据 '123'，不同格式存储：")
    
    # 纯文本格式
    with open("demo.txt", "w", encoding="utf-8") as f:
        f.write("123")
    
    print("✓ .txt文件：可以用记事本直接打开")
    print("✗ .doc文件：用记事本打开会出现乱码")
    print("原因：不同格式有不同的存储规范和解析方式")

# ============================================================================
# 4. 文本文件 vs 二进制文件
# ============================================================================

print("\n" + "=" * 50)
print("4. 文本文件 vs 二进制文件")
print("=" * 50)

# 文件内容类型分类
print("文件内容分类：")
print("\n📄 文本文件：")
print("- 存储可读字符（文字、数字、符号）")
print("- 可以用文本编辑器直接查看和编辑")
print("- 例如：.txt, .py, .html, .csv, .json")

print("\n📦 二进制文件：")
print("- 存储二进制数据（0和1）")
print("- 需要专门的软件才能正确解析")
print("- 例如：.jpg, .mp4, .exe, .zip")

# 二进制存储原理
def binary_storage_concept():
    """演示二进制存储概念"""
    print("\n二进制存储原理：")
    print("所有文件在磁盘上最终都是 0101010101...")
    print("区别在于解析方式：")
    
    print("\n文本文件解析：")
    print("01001000 01100101 → 'He' (按字符编码解析)")
    
    print("\n图片文件解析：")
    print("01001000 01100101 → 像素点(72, 101) (按图像格式解析)")
    
    print("\n这就是为什么用错误的软件打开文件会出现乱码！")

# ============================================================================
# 5. 实际应用示例
# ============================================================================

print("\n" + "=" * 50)
print("5. 实际应用示例")
print("=" * 50)

def practical_examples():
    """实际文件操作示例"""
    
    # 示例1：文本文件操作
    print("示例1：创建和读取文本文件")
    data = "姓名: 张三\n年龄: 25\n职业: 程序员"
    
    with open("user_info.txt", "w", encoding="utf-8") as f:
        f.write(data)
    print("✓ 文本数据已保存")
    
    with open("user_info.txt", "r", encoding="utf-8") as f:
        content = f.read()
        print(f"读取内容：\n{content}")
    
    # 示例2：二进制文件概念
    print("\n示例2：二进制文件处理概念")
    print("图片文件：存储像素点的RGB值")
    print("音频文件：存储声波的数字化数据")
    print("视频文件：存储图像序列和音频数据")

# ============================================================================
# 主要概念总结
# ============================================================================

def main_concepts_summary():
    """主要概念总结"""
    print("\n" + "=" * 60)
    print("🎯 Python文件操作核心概念总结")
    print("=" * 60)
    
    concepts = [
        "1. 文件 = 数据存储容器 + 持久化存储",
        "2. 文件组成 = 文件名 + 扩展名 + 内容",
        "3. 扩展名决定文件格式和处理方式",
        "4. 文件类型：文本文件（可读） vs 二进制文件（需解析）",
        "5. 数据持久化：内存（临时） → 文件（永久）",
    ]
    
    for concept in concepts:
        print(f"✅ {concept}")
    
    print("\n💡 学习要点：")
    print("- 理解文件的本质和作用")
    print("- 掌握文件格式的差异")
    print("- 为后续文件操作打好基础")

# ============================================================================
# 执行演示
# ============================================================================

if __name__ == "__main__":
    # 演示数据持久化
    demonstrate_data_persistence()
    
    # 演示文件命名规则
    file_naming_rules()
    
    # 演示文件格式兼容性
    file_format_compatibility()
    
    # 演示二进制存储概念
    binary_storage_concept()
    
    # 实际应用示例
    practical_examples()
    
    # 总结
    main_concepts_summary()
    
    print("\n🎉 文件操作概念介绍完毕！")
