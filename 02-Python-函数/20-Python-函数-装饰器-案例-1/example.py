# -*- coding: utf-8 -*-

# @Time    : 2025-5-29
# @Author  : 程序员NEO
# @FileName: example.py
# @Software: VSCode
# @Email   : it666@linux.do
# @Github  : https://github.com/BNTang
# @Description: 20-Python-函数-装饰器-案例-1

"""
装饰器学习案例 - 基础版本

装饰器的核心概念：
1. 装饰器是一种设计模式
2. 在不改变函数名和函数体的前提下，为函数附加额外功能
3. 实现功能代码与业务逻辑的分离
"""

# ============ 功能函数定义 ============
def 发说说():
    """发说说功能函数"""
    print("发说说")

def 发图片():
    """发图片功能函数"""
    print("发图片")

# ============ 业务逻辑代码 ============
# 模拟用户界面按钮操作
btn_index = 1  # 按钮索引：1=发说说按钮，2=发图片按钮

# 根据用户点击的按钮执行相应功能
if btn_index == 1:
    发说说()  # 调用发说说功能
else:
    发图片()  # 调用发图片功能

print("\n" + "="*50)
print("装饰器学习要点：")
print("1. 功能函数与业务逻辑分离")
print("2. 便于代码复用和维护")
print("3. 后续将学习如何用装饰器增强这些函数")
print("="*50)

# ============ 测试不同按钮 ============
print("\n测试按钮切换：")
for i in [1, 2]:
    print(f"模拟点击按钮 {i}:")
    if i == 1:
        发说说()
    else:
        发图片()
